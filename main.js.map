{"version":3,"sources":["/Users/emilyxiong/Documents/white-label-airline/libs/services/api/api.service.ts","/Users/emilyxiong/Documents/white-label-airline/libs/services/countries/countries.service.ts","/Users/emilyxiong/Documents/white-label-airline/libs/services/countries/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/services/currencies/currencies.service.ts","/Users/emilyxiong/Documents/white-label-airline/libs/services/currencies/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/services/i18n/i18n.ts","/Users/emilyxiong/Documents/white-label-airline/libs/services/i18n/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/services/places/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/services/places/models/place.interface.ts","/Users/emilyxiong/Documents/white-label-airline/libs/services/places/places.service.ts","/Users/emilyxiong/Documents/white-label-airline/libs/services/quotes/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/services/quotes/quotes.service.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/countries/countries.epics.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/countries/countries.selectors.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/countries/countries.slice.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/countries/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/currencies/currencies.epics.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/currencies/currencies.selectors.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/currencies/currencies.slice.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/currencies/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/error/error.slice.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/error/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/language/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/language/language.selectors.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/language/language.slice.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/models/fetch-status.enum.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/places/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/places/places-state-initial.const.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/places/places.epics.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/places/places.selectors.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/places/places.slice.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/quotes/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/quotes/quotes-state-initial.const.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/quotes/quotes.epics.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/quotes/quotes.selectors.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/quotes/quotes.slice.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/root/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/root/root.epic.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/root/root.reducer.ts","/Users/emilyxiong/Documents/white-label-airline/libs/store/root/root.store.ts","/Users/emilyxiong/Documents/white-label-airline/libs/ui/hooks/field-errors-touched.hooks.ts","/Users/emilyxiong/Documents/white-label-airline/libs/ui/hooks/screen-size.hook.ts","/Users/emilyxiong/Documents/white-label-airline/libs/ui/models/feature-toggle-names.enum.ts","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/components/country/country.props.ts","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/components/country/country.tsx","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/components/currency/currency.props.ts","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/components/currency/currency.tsx","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/components/place/place.props.ts","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/components/place/place.tsx","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/components/trip-type/trip-type.tsx","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/index.ts","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/models/search-form-default.const.ts","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/models/search-form.schema.ts","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/models/trip-type.enum.ts","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/search-form.props.ts","/Users/emilyxiong/Documents/white-label-airline/libs/ui/search-form/search-form.tsx","./app/app.tsx","./app/features.const.ts","./app/routes.tsx","./main.tsx","./pages/search/country.const.ts","./pages/search/search-form-init.const.ts","./pages/search/search.tsx"],"names":["getApiHeaders","process","useQueryString","getCountries","locale","response","fetch","headers","ok","json","countriesService","getCurrencies","currenciesService","setI18n","loadPath","i18n","use","LanguageDetector","initReactI18next","HttpApi","init","backend","lng","fallbackLng","debug","interpolation","escapeValue","getPlaceLabel","place","PlaceName","PlaceId","getPlaces","country","currency","query","url","URL","searchParams","set","toString","placesService","getQuotes","from","to","departDate","returnDate","departDateString","format","returnDateString","quotesService","getCountriesEpic","action$","states$","pipe","ofType","countriesSlice","actions","type","withLatestFrom","map","languageSelectors","getLanguage","switchMap","_","language","getCountriesSuccess","Countries","catchError","error","of","errorSlice","handleError","countriesEpics","rootState","countries","countriesSelectors","createSlice","name","initialState","reducers","state","action","payload","getCurrenciesEpic","currenciesSlice","getCurrenciesSuccess","Currencies","currenciesEpics","currencies","currenciesSelectors","clearError","languageSlice","setLanguage","FetchStatus","initialPlacesState","results","getPlacesEpic","placesSlice","debounceTime","distinctUntilChanged","equals","getPlacesSuccess","Places","placesEpics","places","placesSelectors","reducer","prepare","initialQuotesState","fetchStatus","Initial","getQuotesEpic","quotesSlice","getQuotesSuccess","quotesEpics","getQuotesState","quotes","getQuotesFetchStatus","getQuotesResponse","getCarriers","Carriers","Quotes","quotesSelectors","Loading","Success","rootEpic","combineEpics","rootReducer","combineReducers","epicMiddleware","createEpicMiddleware","configureAppStore","preloadedState","store","configureStore","middleware","logger","devTools","run","useFieldErrorTouched","touched","errors","isSubmitting","useFormikContext","fieldError","setFieldError","useState","fieldTouched","setFieldTouched","useEffect","getIn","IsScreenSizeSm","theme","useTheme","useMediaQuery","breakpoints","down","IsScreenSizeMd","between","IsScreenSizeLg","IsScreenSizeXl","up","FeatureToggleNames","mapStateToProps","mapDispatchToProps","dispatch","Country","label","t","useTranslation","length","Autocomplete","option","Name","value","Code","params","field","connect","Currency","Place","setQuery","filteredPlaces","setFilteredPlaces","handleChange","event","element","currentTarget","userInput","count","TripType","props","Select","TripTypeEnum","OneWay","RoundTrip","SearchForm","defaultSearchForm","tripType","searchFormSchema","yup","shape","nullable","required","typeError","oneOf","when","is","then","quotesFetchStatus","searchForm","bottonProps","values","setSubmitting","submitSearch","Error","isScreenSizeSm","DateFnsUtils","ShowCountry","ShowCurrency","KeyboardDatePicker","Date","now","SearchFormik","withFormik","mapPropsToValues","initSearchForm","validationSchema","handleSubmit","App","features","Routes","ReactDOM","render","document","getElementById","DecimalDigits","DecimalSeparator","RoundingCoefficient","SpaceBetweenAmountAndSymbol","Symbol","SymbolOnLeft","ThousandsSeparator","Search"],"mappings":"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","file":"main.js","sourcesContent":["declare const process;\n\nexport function getApiHeaders() {\n  return {\n    'Content-Type': 'application/json',\n    'x-rapidapi-host': 'skyscanner-skyscanner-flight-search-v1.p.rapidapi.com',\n    'x-rapidapi-key': process.env.NX_API_KEY,\n    useQueryString: 'true',\n  };\n}\n","import { getApiHeaders } from '../api/api.service';\n\nimport { CountriesResponse } from './models/countries-response.interface';\n\ndeclare const process;\n\nasync function getCountries(locale: string): Promise<CountriesResponse> {\n  const response = await fetch(\n    process.env.NX_API_COUNTRIES_URL + '/' + locale,\n    {\n      headers: getApiHeaders(),\n    }\n  );\n  if (response.ok) {\n    return response.json();\n  }\n  throw response;\n}\n\nexport const countriesService = { getCountries };\n","export * from './countries.service';\nexport * from './models/countries-response.interface';\nexport * from './models/country.interface';\n","import { getApiHeaders } from '../api/api.service';\n\nimport { CurrenciesResponseInterface } from './models/currencies-response.interface';\n\ndeclare const process;\n\nasync function getCurrencies(): Promise<CurrenciesResponseInterface> {\n  const response = await fetch(process.env.NX_API_CURRENCIES_URL, {\n    headers: getApiHeaders(),\n  });\n  if (response.ok) {\n    return response.json();\n  }\n  throw response;\n}\n\nexport const currenciesService = { getCurrencies };\n","export * from './currencies.service';\nexport * from './models/currencies-response.interface';\nexport * from './models/currency.interface';\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport HttpApi from 'i18next-http-backend';\n\nexport function setI18n(loadPath: string) {\n  i18n\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .use(HttpApi)\n    .init({\n      backend: { loadPath },\n      lng: 'en-GB',\n      fallbackLng: {\n        'en-GB': ['en'],\n      },\n      debug: true,\n\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n    });\n  return i18n;\n}\n","export * from './i18n';\n","export * from './models/place.interface';\nexport * from './models/places-response.interface';\nexport * from './places.service';\n","export interface PlaceInterface {\n  PlaceId: string;\n  PlaceName: string;\n  CountryId: string;\n  RegionId: string;\n  CityId: string;\n  CountryName: string;\n}\n\nexport function getPlaceLabel(place: PlaceInterface): string {\n  return `${place.PlaceName} (${place.PlaceId})`;\n}\n","import { getApiHeaders } from '../api/api.service';\n\nimport { PlacesResponseInterface } from './models/places-response.interface';\n\ndeclare const process;\n\nasync function getPlaces(\n  country: string,\n  currency: string,\n  locale: string,\n  query: string\n): Promise<PlacesResponseInterface> {\n  const url = new URL(\n    `${process.env.NX_API_PLACES_URL}/${country}/${currency}/${locale}/`\n  );\n  url.searchParams.set('query', query);\n\n  const response = await fetch(url.toString(), {\n    headers: getApiHeaders(),\n  });\n  if (response.ok) {\n    return response.json();\n  }\n  throw response;\n}\n\nexport const placesService = { getPlaces };\n","export * from './quotes.service';\nexport * from './models/quotes-response.interface';\nexport * from './models/quote.interface';\nexport * from './models/carrier.interface';\n","import { format } from 'date-fns';\n\nimport { getApiHeaders } from '../api/api.service';\n\nimport { QuotesResponseInterface } from './models/quotes-response.interface';\n\ndeclare const process;\n\nasync function getQuotes(\n  country: string,\n  currency: string,\n  locale: string,\n  from: string,\n  to: string,\n  departDate: Date,\n  returnDate?: Date\n): Promise<QuotesResponseInterface> {\n  const departDateString = format(departDate, 'yyyy-MM-dd');\n  const returnDateString = returnDate ? format(returnDate, 'yyyy-MM-dd') : '';\n\n  const url = new URL(\n    `${process.env.NX_API_BROWSE_QUOTES}/${country}/${currency}/${locale}/${from}/${to}/${departDateString}`\n  );\n  url.searchParams.set('query', returnDateString);\n\n  const response = await fetch(url.toString(), {\n    headers: getApiHeaders(),\n  });\n  if (response.ok) {\n    return response.json();\n  }\n  throw response;\n}\n\nexport const quotesService = { getQuotes };\n","import { Action } from '@reduxjs/toolkit';\nimport {\n  ofType,\n  ActionsObservable,\n  Epic,\n  StateObservable,\n} from 'redux-observable';\nimport { map, catchError, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { from, of } from 'rxjs';\nimport {\n  countriesService,\n  CountriesResponse,\n} from '@white-label-airline/services/countries';\n\nimport { languageSelectors } from '../language/language.selectors';\nimport { RootState } from '../root';\nimport { errorSlice } from '../error/error.slice';\n\nimport { countriesSlice } from './countries.slice';\n\nconst getCountriesEpic: Epic = (\n  action$: ActionsObservable<Action>,\n  states$: StateObservable<RootState>\n) =>\n  action$.pipe(\n    ofType(countriesSlice.actions.getCountries.type),\n    withLatestFrom(states$.pipe(map(languageSelectors.getLanguage))),\n    switchMap(([_, language]) => {\n      return from(countriesService.getCountries(language)).pipe(\n        map((response: CountriesResponse) =>\n          countriesSlice.actions.getCountriesSuccess(response.Countries)\n        ),\n        catchError((error) => of(errorSlice.actions.handleError(error)))\n      );\n    })\n  );\n\nexport const countriesEpics = [getCountriesEpic];\n","import { RootState } from '../root';\n\nconst getCountries = (rootState: RootState) => rootState.countries;\n\nexport const countriesSelectors = { getCountries };\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const countriesSlice = createSlice({\n  name: 'countries',\n  initialState: [],\n  reducers: {\n    getCountries(state) {\n      state = [];\n    },\n    getCountriesSuccess(_, action) {\n      return action.payload;\n    },\n  },\n});\n","export * from './countries.selectors';\nexport * from './countries.slice';\n","import { Action } from '@reduxjs/toolkit';\nimport { ofType, ActionsObservable, Epic } from 'redux-observable';\nimport { map, catchError, switchMap } from 'rxjs/operators';\nimport { from, of } from 'rxjs';\nimport {\n  currenciesService,\n  CurrenciesResponseInterface,\n} from '@white-label-airline/services/currencies';\n\nimport { errorSlice } from '../error/error.slice';\n\nimport { currenciesSlice } from './currencies.slice';\n\nconst getCurrenciesEpic: Epic = (action$: ActionsObservable<Action>) =>\n  action$.pipe(\n    ofType(currenciesSlice.actions.getCurrencies.type),\n    switchMap(() => {\n      return from(currenciesService.getCurrencies()).pipe(\n        map((response: CurrenciesResponseInterface) =>\n          currenciesSlice.actions.getCurrenciesSuccess(response.Currencies)\n        ),\n        catchError((error) => of(errorSlice.actions.handleError(error)))\n      );\n    })\n  );\n\nexport const currenciesEpics = [getCurrenciesEpic];\n","import { CurrencyInterface } from '@white-label-airline/services/currencies';\n\nimport { RootState } from '../root';\n\nconst getCurrencies = (rootState: RootState): CurrencyInterface[] =>\n  rootState.currencies;\n\nexport const currenciesSelectors = { getCurrencies };\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const currenciesSlice = createSlice({\n  name: 'currencies',\n  initialState: [],\n  reducers: {\n    getCurrencies(state) {\n      state = [];\n    },\n    getCurrenciesSuccess(_, action) {\n      return action.payload;\n    },\n  },\n});\n","export * from './currencies.selectors';\nexport * from './currencies.slice';\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const errorSlice = createSlice({\n  name: 'error',\n  initialState: null,\n  reducers: {\n    handleError(_, action) {\n      return action.payload;\n    },\n    clearError() {\n      return null;\n    },\n  },\n});\n","export * from './error.slice';\n","export * from './countries';\nexport * from './currencies';\nexport * from './error';\nexport * from './language';\nexport * from './places';\nexport * from './quotes';\nexport * from './root';\nexport * from './models/fetch-status.enum';\n","export * from './language.selectors';\nexport * from './language.slice';\n","import { RootState } from '../root';\n\nconst getLanguage = (rootState: RootState): string => rootState.language;\n\nexport const languageSelectors = { getLanguage };\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const languageSlice = createSlice({\n  name: 'language',\n  initialState: 'en-GB',\n  reducers: {\n    setLanguage(state, action) {\n      state = action.payload;\n    },\n  },\n});\n","export enum FetchStatus {\n  Initial,\n  Loading,\n  Success,\n  Error,\n}\n","export * from './places.selectors';\nexport * from './places.slice';\nexport * from './places-state.interface';\n","import { PlacesStateInterface } from './places-state.interface';\n\nexport const initialPlacesState: PlacesStateInterface = {\n  query: null,\n  results: [],\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport {\n  ofType,\n  ActionsObservable,\n  Epic,\n  StateObservable,\n} from 'redux-observable';\nimport {\n  map,\n  catchError,\n  switchMap,\n  debounceTime,\n  distinctUntilChanged,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { from, of } from 'rxjs';\nimport {\n  placesService,\n  PlacesResponseInterface,\n} from '@white-label-airline/services/places';\nimport { equals } from 'ramda';\n\nimport { errorSlice } from '../error/error.slice';\nimport { RootState } from '../root/root-state.interface';\nimport { languageSelectors } from '../language/language.selectors';\n\nimport { placesSlice, GetPlacesPayload } from './places.slice';\n\nconst getPlacesEpic: Epic = (\n  action$: ActionsObservable<PayloadAction<GetPlacesPayload>>,\n  states$: StateObservable<RootState>\n) =>\n  action$.pipe(\n    ofType(placesSlice.actions.getPlaces.type),\n    debounceTime(500),\n    distinctUntilChanged(equals),\n    withLatestFrom(states$.pipe(map(languageSelectors.getLanguage))),\n    switchMap(([action, language]) => {\n      const { payload } = action as PayloadAction<GetPlacesPayload>;\n      return from(\n        placesService.getPlaces(\n          payload.country,\n          payload.currency,\n          language,\n          payload.query\n        )\n      ).pipe(\n        map((response: PlacesResponseInterface) =>\n          placesSlice.actions.getPlacesSuccess(response.Places)\n        ),\n        catchError((error) => of(errorSlice.actions.handleError(error)))\n      );\n    })\n  );\n\nexport const placesEpics = [getPlacesEpic];\n","import { RootState } from '../root';\n\nimport { PlacesStateInterface } from './places-state.interface';\n\nconst getPlaces = (rootState: RootState): PlacesStateInterface =>\n  rootState.places;\n\nexport const placesSelectors = { getPlaces };\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { initialPlacesState } from './places-state-initial.const';\n\nexport interface GetPlacesPayload {\n  country: string;\n  currency: string;\n  query: string;\n}\n\nexport const placesSlice = createSlice({\n  name: 'places',\n  initialState: initialPlacesState,\n  reducers: {\n    getPlaces: {\n      reducer(_, action: PayloadAction<GetPlacesPayload>) {\n        return {\n          query: action.payload.query,\n          results: [],\n        };\n      },\n      prepare({ country, currency, query }: GetPlacesPayload) {\n        return { payload: { country, currency, query } };\n      },\n    },\n    getPlacesSuccess(state, action) {\n      return { ...state, results: action.payload };\n    },\n  },\n});\n","export * from './quotes.slice';\nexport * from './quotes.selectors';\n","import { FetchStatus } from '../models/fetch-status.enum';\n\nimport { QuotesStateInterface } from './quotes-state.interface';\n\nexport const initialQuotesState: QuotesStateInterface = {\n  response: null,\n  fetchStatus: FetchStatus.Initial,\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport {\n  ofType,\n  ActionsObservable,\n  Epic,\n  StateObservable,\n} from 'redux-observable';\nimport { map, catchError, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { from, of } from 'rxjs';\nimport {\n  quotesService,\n  QuotesResponseInterface,\n} from '@white-label-airline/services/quotes';\n\nimport { errorSlice } from '../error/error.slice';\nimport { RootState } from '../root/root-state.interface';\nimport { languageSelectors } from '../language/language.selectors';\n\nimport { GetQuotesPayload, quotesSlice } from './quotes.slice';\n\nconst getQuotesEpic: Epic = (\n  action$: ActionsObservable<PayloadAction<GetQuotesPayload>>,\n  states$: StateObservable<RootState>\n) =>\n  action$.pipe(\n    ofType(quotesSlice.actions.getQuotes.type),\n    withLatestFrom(states$.pipe(map(languageSelectors.getLanguage))),\n    switchMap(([action, language]) => {\n      const { payload }: PayloadAction<GetQuotesPayload> = action;\n      return from(\n        quotesService.getQuotes(\n          payload.country,\n          payload.currency,\n          language,\n          payload.from,\n          payload.to,\n          payload.departDate,\n          payload.returnDate\n        )\n      ).pipe(\n        map((response: QuotesResponseInterface) =>\n          quotesSlice.actions.getQuotesSuccess(response)\n        ),\n        catchError((error) => of(errorSlice.actions.handleError(error)))\n      );\n    })\n  );\n\nexport const quotesEpics = [getQuotesEpic];\n","import {\n  QuotesResponseInterface,\n  QuoteInterface,\n  CarrierInterface,\n} from '@white-label-airline/services/quotes';\n\nimport { RootState } from '../root';\nimport { FetchStatus } from '../models/fetch-status.enum';\n\nimport { QuotesStateInterface } from './quotes-state.interface';\n\nconst getQuotesState = (rootState: RootState): QuotesStateInterface =>\n  rootState.quotes;\n\nconst getQuotesFetchStatus = (rootState: RootState): FetchStatus =>\n  getQuotesState(rootState).fetchStatus;\n\nconst getQuotesResponse = (rootState: RootState): QuotesResponseInterface =>\n  getQuotesState(rootState).response;\n\nconst getCarriers = (rootState: RootState): CarrierInterface[] =>\n  getQuotesResponse(rootState).Carriers;\n\nconst getQuotes = (rootState: RootState): QuoteInterface[] =>\n  getQuotesResponse(rootState).Quotes;\n\nexport const quotesSelectors = {\n  getQuotesResponse,\n  getQuotesFetchStatus,\n  getCarriers,\n  getQuotes,\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { QuotesResponseInterface } from '@white-label-airline/services/quotes';\n\nimport { FetchStatus } from '../models/fetch-status.enum';\n\nimport { initialQuotesState } from './quotes-state-initial.const';\n\nexport interface GetQuotesPayload {\n  country: string;\n  currency: string;\n  from: string;\n  to: string;\n  departDate: Date;\n  returnDate: Date;\n}\n\nexport const quotesSlice = createSlice({\n  name: 'quotes',\n  initialState: initialQuotesState,\n  reducers: {\n    getQuotes: {\n      reducer() {\n        return { response: null, fetchStatus: FetchStatus.Loading };\n      },\n      prepare({\n        country,\n        currency,\n        from,\n        to,\n        departDate,\n        returnDate,\n      }: GetQuotesPayload) {\n        return {\n          payload: { country, currency, from, to, departDate, returnDate },\n        };\n      },\n    },\n    getQuotesSuccess(_, action: PayloadAction<QuotesResponseInterface>) {\n      return { response: action.payload, fetchStatus: FetchStatus.Success };\n    },\n  },\n});\n","export * from './root-state.interface';\nexport * from './root.store';\n","import { combineEpics } from 'redux-observable';\n\nimport { countriesEpics } from '../countries/countries.epics';\nimport { currenciesEpics } from '../currencies/currencies.epics';\nimport { placesEpics } from '../places/places.epics';\nimport { quotesEpics } from '../quotes/quotes.epics';\n\nexport const rootEpic = combineEpics(\n  ...countriesEpics,\n  ...currenciesEpics,\n  ...placesEpics,\n  ...quotesEpics\n);\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { countriesSlice } from '../countries/countries.slice';\nimport { errorSlice } from '../error/error.slice';\nimport { languageSlice } from '../language/language.slice';\nimport { currenciesSlice } from '../currencies/currencies.slice';\nimport { placesSlice } from '../places/places.slice';\nimport { quotesSlice } from '../quotes/quotes.slice';\n\nimport { RootState } from './root-state.interface';\n\nexport const rootReducer = combineReducers<RootState>({\n  countries: countriesSlice.reducer,\n  currencies: currenciesSlice.reducer,\n  language: languageSlice.reducer,\n  places: placesSlice.reducer,\n  error: errorSlice.reducer,\n  quotes: quotesSlice.reducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport { createEpicMiddleware } from 'redux-observable';\nimport logger from 'redux-logger';\n\nimport { rootReducer } from './root.reducer';\nimport { RootState } from './root-state.interface';\nimport { rootEpic } from './root.epic';\n\nconst epicMiddleware = createEpicMiddleware();\n\nexport function configureAppStore(preloadedState?: RootState) {\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [epicMiddleware, logger],\n    preloadedState,\n    devTools: true,\n  });\n\n  epicMiddleware.run(rootEpic);\n\n  return store;\n}\n","import { useFormikContext, getIn } from 'formik';\nimport { useState, useEffect } from 'react';\n\nexport function useFieldErrorTouched(name: string) {\n  const { touched, errors, isSubmitting } = useFormikContext();\n  const [fieldError, setFieldError] = useState(null);\n  const [fieldTouched, setFieldTouched] = useState(false);\n\n  useEffect(() => {\n    setFieldError(getIn(errors, name));\n  }, [errors, name]);\n\n  useEffect(() => {\n    setFieldTouched(getIn(touched, name));\n  }, [touched, name]);\n\n  return { fieldError, fieldTouched, isSubmitting };\n}\n","import { useTheme, useMediaQuery, Theme } from '@material-ui/core';\n\nexport function IsScreenSizeSm() {\n  const theme: Theme = useTheme();\n\n  return useMediaQuery(theme.breakpoints.down('sm'));\n}\n\nexport function IsScreenSizeMd() {\n  const theme: Theme = useTheme();\n\n  return useMediaQuery(theme.breakpoints.between('sm', 'md'));\n}\n\nexport function IsScreenSizeLg() {\n  const theme: Theme = useTheme();\n\n  return useMediaQuery(theme.breakpoints.between('md', 'lg'));\n}\n\nexport function IsScreenSizeXl() {\n  const theme: Theme = useTheme();\n\n  return useMediaQuery(theme.breakpoints.up('lg'));\n}\n","export enum FeatureToggleNames {\n  ShowCountry = 'ShowCountry',\n  ShowCurrency = 'ShowCurrency',\n}\n","import {\n  RootState,\n  countriesSelectors,\n  countriesSlice,\n} from '@white-label-airline/store';\nimport { Dispatch } from '@reduxjs/toolkit';\nimport { CountryInterface } from '@white-label-airline/services/countries';\n\nimport { FormFieldProps } from '../../../models/form-field-props.interface';\n\nexport const mapStateToProps = (\n  state: RootState\n): { countries: CountryInterface[] } => {\n  return {\n    countries: countriesSelectors.getCountries(state),\n  };\n};\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    getCountries() {\n      dispatch(countriesSlice.actions.getCountries());\n    },\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\nexport type CountryProps = mapStateToPropsType &\n  mapDispatchToPropsType &\n  FormFieldProps;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Field } from 'formik';\nimport {\n  Autocomplete,\n  AutocompleteRenderInputParams,\n} from 'formik-material-ui-lab';\nimport { CountryInterface } from '@white-label-airline/services/countries';\nimport { TextField } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport { useFieldErrorTouched } from '../../../hooks/field-errors-touched.hooks';\n\nimport {\n  mapStateToProps,\n  mapDispatchToProps,\n  CountryProps,\n} from './country.props';\n\nconst Country: React.FunctionComponent<CountryProps> = ({\n  getCountries,\n  countries,\n  name,\n  label,\n}: CountryProps) => {\n  const { t } = useTranslation();\n  const { fieldError, fieldTouched } = useFieldErrorTouched(name);\n\n  useEffect(() => {\n    getCountries();\n  }, [getCountries]);\n\n  return (\n    <Field\n      loading={!countries || !countries.length}\n      component={Autocomplete}\n      options={countries}\n      getOptionLabel={(option: CountryInterface) => option.Name}\n      getOptionSelected={(option: CountryInterface, value: CountryInterface) =>\n        option.Code === value.Code\n      }\n      name={name}\n      renderInput={(params: AutocompleteRenderInputParams) => (\n        <TextField\n          {...params}\n          label={label}\n          error={fieldTouched && !!fieldError}\n          helperText={t(fieldError, { field: label })}\n        />\n      )}\n    />\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Country);\n","import {\n  RootState,\n  currenciesSelectors,\n  currenciesSlice,\n} from '@white-label-airline/store';\nimport { Dispatch } from '@reduxjs/toolkit';\n\nimport { FormFieldProps } from '../../../models/form-field-props.interface';\n\nexport const mapStateToProps = (state: RootState) => {\n  return {\n    currencies: currenciesSelectors.getCurrencies(state),\n  };\n};\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    getCurrencies() {\n      dispatch(currenciesSlice.actions.getCurrencies());\n    },\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\nexport type CurrencyProps = mapStateToPropsType &\n  mapDispatchToPropsType &\n  FormFieldProps;\n","import React, { useEffect } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  Autocomplete,\n  AutocompleteRenderInputParams,\n} from 'formik-material-ui-lab';\nimport { CurrencyInterface } from '@white-label-airline/services/currencies';\nimport { connect } from 'react-redux';\nimport { Field } from 'formik';\nimport { useTranslation } from 'react-i18next';\n\nimport { useFieldErrorTouched } from '../../../hooks/field-errors-touched.hooks';\n\nimport {\n  mapStateToProps,\n  mapDispatchToProps,\n  CurrencyProps,\n} from './currency.props';\n\nconst Currency: React.FunctionComponent<CurrencyProps> = ({\n  currencies,\n  name,\n  label,\n  getCurrencies,\n}: CurrencyProps) => {\n  const { t } = useTranslation();\n  const { fieldError, fieldTouched } = useFieldErrorTouched(name);\n\n  useEffect(() => {\n    getCurrencies();\n  }, [getCurrencies]);\n\n  return (\n    <Field\n      loading={!currencies || !currencies.length}\n      component={Autocomplete}\n      options={currencies}\n      getOptionLabel={(option: CurrencyInterface) => option.Code}\n      getOptionSelected={(\n        option: CurrencyInterface,\n        value: CurrencyInterface\n      ) => option.Code === value.Code}\n      name={name}\n      renderInput={(params: AutocompleteRenderInputParams) => (\n        <TextField\n          {...params}\n          label={label}\n          error={fieldTouched && !!fieldError}\n          helperText={t(fieldError, { field: label })}\n        />\n      )}\n    />\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Currency);\n","import {\n  RootState,\n  placesSelectors,\n  placesSlice,\n} from '@white-label-airline/store';\nimport { Dispatch } from '@reduxjs/toolkit';\nimport { CountryInterface } from '@white-label-airline/services/countries';\nimport { CurrencyInterface } from '@white-label-airline/services/currencies';\n\nimport { FormFieldProps } from '../../../models/form-field-props.interface';\n\nexport const mapStateToProps = (state: RootState) => {\n  return {\n    places: placesSelectors.getPlaces(state),\n  };\n};\n\nexport const mapDispatchToProps = (\n  dispatch: Dispatch\n): { getPlaces: Function } => {\n  return {\n    getPlaces({\n      country,\n      currency,\n      query,\n    }: {\n      country: CountryInterface;\n      currency: CurrencyInterface;\n      query: string;\n    }) {\n      dispatch(\n        placesSlice.actions.getPlaces({\n          country: country.Code,\n          currency: currency.Code,\n          query,\n        })\n      );\n    },\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\nexport type PlaceProps = mapStateToPropsType &\n  mapDispatchToPropsType &\n  FormFieldProps & {\n    country: CountryInterface;\n    currency: CurrencyInterface;\n  };\n","import React, { SyntheticEvent, useState, useEffect } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  Autocomplete,\n  AutocompleteRenderInputParams,\n} from 'formik-material-ui-lab';\nimport { connect } from 'react-redux';\nimport { PlaceInterface } from '@white-label-airline/services/places';\nimport { Field } from 'formik';\nimport { useTranslation } from 'react-i18next';\n\nimport { useFieldErrorTouched } from '../../../hooks/field-errors-touched.hooks';\n\nimport { mapStateToProps, mapDispatchToProps, PlaceProps } from './place.props';\n\nconst Place: React.FunctionComponent<PlaceProps> = ({\n  places,\n  country,\n  currency,\n  getPlaces,\n  name,\n  label,\n}: PlaceProps) => {\n  const { t } = useTranslation();\n  const [query, setQuery] = useState(null);\n  const [filteredPlaces, setFilteredPlaces] = useState([]);\n  const { fieldError, fieldTouched, isSubmitting } = useFieldErrorTouched(name);\n\n  const handleChange = (event: SyntheticEvent) => {\n    const element = event.currentTarget as HTMLInputElement;\n    const userInput = element.value;\n    if (userInput.length >= 3 && query !== userInput) {\n      setQuery(userInput);\n    }\n  };\n\n  useEffect(() => {\n    getPlaces({\n      country: country,\n      currency: currency,\n      query,\n    });\n  }, [country, currency, query, getPlaces]);\n\n  useEffect(() => {\n    if (places.query === query) {\n      setFilteredPlaces(places.results);\n    }\n  }, [query, places]);\n\n  return (\n    <Field\n      loading={!filteredPlaces || !filteredPlaces.length}\n      component={Autocomplete}\n      disabled={!currency || !country || isSubmitting}\n      options={filteredPlaces}\n      getOptionLabel={(option: PlaceInterface) =>\n        `${option.PlaceName} (${option.PlaceId})`\n      }\n      getOptionSelected={(option: PlaceInterface, value: PlaceInterface) =>\n        option?.PlaceId === value?.PlaceId\n      }\n      name={name}\n      renderInput={(params: AutocompleteRenderInputParams) => (\n        <TextField\n          {...params}\n          label={label}\n          onChange={handleChange}\n          error={fieldTouched && !!fieldError}\n          helperText={t(fieldError, { field: label })}\n        />\n      )}\n    />\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Place);\n","import React from 'react';\nimport { Field } from 'formik';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { Select } from 'formik-material-ui';\nimport { useTranslation } from 'react-i18next';\n\nimport { TripTypeEnum } from '../../models/trip-type.enum';\nimport { FormFieldProps } from '../../../models/form-field-props.interface';\n\nlet count = 0;\n\nconst TripType: React.FunctionComponent<FormFieldProps> = (\n  props: FormFieldProps\n) => {\n  const { t } = useTranslation();\n\n  return (\n    <FormControl fullWidth={true}>\n      <InputLabel htmlFor={props.name + count++}>{props.label}</InputLabel>\n      <Field component={Select} id={props.name + count++} name={props.name}>\n        <MenuItem value={TripTypeEnum.OneWay}>\n          {t(TripTypeEnum.OneWay)}\n        </MenuItem>\n        <MenuItem value={TripTypeEnum.RoundTrip}>\n          {t(TripTypeEnum.RoundTrip)}\n        </MenuItem>\n      </Field>\n    </FormControl>\n  );\n};\n\nexport default TripType;\n","import SearchForm from './search-form';\nimport { SearchFormInterface } from './models/search-form.interface';\nimport { TripTypeEnum } from './models/trip-type.enum';\n\nexport default SearchForm;\nexport { SearchFormInterface, TripTypeEnum };\n","import { SearchFormInterface } from './search-form.interface';\nimport { TripTypeEnum } from './trip-type.enum';\n\nexport const defaultSearchForm: SearchFormInterface = {\n  country: null,\n  tripType: TripTypeEnum.OneWay,\n  currency: null,\n  from: null,\n  departDate: null,\n  to: null,\n  returnDate: null,\n};\n","import * as yup from 'yup';\n\nimport { TripTypeEnum } from './trip-type.enum';\n\nexport const searchFormSchema = yup.object().shape({\n  country: yup\n    .object()\n    .nullable()\n    .required('messages.required')\n    .typeError('messages.required'),\n  tripType: yup\n    .string()\n    .nullable()\n    .required('messages.required')\n    .oneOf([TripTypeEnum.OneWay, TripTypeEnum.RoundTrip])\n    .typeError('messages.required'),\n  currency: yup\n    .object()\n    .nullable()\n    .required('messages.required')\n    .typeError('messages.required'),\n  from: yup\n    .object()\n    .nullable()\n    .required('messages.required')\n    .typeError('messages.required'),\n  departDate: yup.date().required('messages.required'),\n  to: yup.object().nullable().required('messages.required'),\n  returnDate: yup\n    .date()\n    .nullable()\n    .when('tripType', {\n      is: TripTypeEnum.RoundTrip,\n      then: yup.date().required('messages.required'),\n    }),\n});\n","export enum TripTypeEnum {\n  OneWay = 'search.oneWay',\n  RoundTrip = 'search.roundTrip',\n}\n","import { Dispatch } from '@reduxjs/toolkit';\nimport {\n  RootState,\n  quotesSlice,\n  quotesSelectors,\n} from '@white-label-airline/store';\nimport { ButtonProps } from '@material-ui/core';\n\nimport { SearchFormInterface } from './models/search-form.interface';\n\nexport const mapStateToProps = (state: RootState) => {\n  return { quotesFetchStatus: quotesSelectors.getQuotesFetchStatus(state) };\n};\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    getQuotes(searchForm: SearchFormInterface) {\n      dispatch(\n        quotesSlice.actions.getQuotes({\n          country: searchForm.country.Code,\n          currency: searchForm.currency.Code,\n          from: searchForm.from.PlaceId,\n          to: searchForm.to.PlaceId,\n          departDate: searchForm.departDate,\n          returnDate: searchForm.returnDate,\n        })\n      );\n    },\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\nexport type SearchProps = mapStateToPropsType &\n  mapDispatchToPropsType & {\n    initSearchForm?: SearchFormInterface;\n    bottonProps?: Partial<ButtonProps>;\n    submitSearch?: Function;\n  };\n","import React, { useEffect } from 'react';\nimport { Form, Field, getIn, withFormik, FormikProps } from 'formik';\nimport { connect } from 'react-redux';\nimport { Button, Grid, Box } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { KeyboardDatePicker } from 'formik-material-ui-pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { FeatureToggle } from 'react-feature-toggles';\nimport { FetchStatus } from '@white-label-airline/store';\n\nimport { IsScreenSizeSm } from '../hooks/screen-size.hook';\nimport { FeatureToggleNames } from '../models/feature-toggle-names.enum';\n\nimport {\n  mapStateToProps,\n  mapDispatchToProps,\n  SearchProps,\n} from './search-form.props';\nimport Country from './components/country/country';\nimport Currency from './components/currency/currency';\nimport Place from './components/place/place';\nimport { defaultSearchForm } from './models/search-form-default.const';\nimport TripType from './components/trip-type/trip-type';\nimport { TripTypeEnum } from './models/trip-type.enum';\nimport { searchFormSchema } from './models/search-form.schema';\nimport { SearchFormInterface } from './models/search-form.interface';\n\nconst SearchForm: React.FunctionComponent<SearchProps> = ({\n  bottonProps,\n  quotesFetchStatus,\n  values,\n  errors,\n  setSubmitting,\n  submitSearch,\n}: SearchProps & FormikProps<SearchFormInterface>) => {\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (quotesFetchStatus === FetchStatus.Success) {\n      submitSearch();\n    } else if (quotesFetchStatus === FetchStatus.Error) {\n      setSubmitting(false);\n    }\n  }, [quotesFetchStatus, setSubmitting, submitSearch]);\n\n  const isScreenSizeSm = IsScreenSizeSm();\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Form>\n        <Grid container spacing={3}>\n          <FeatureToggle featureName={FeatureToggleNames.ShowCountry}>\n            <Grid item xs={6} md={3}>\n              <Country name=\"country\" label={t('search.country')} />\n            </Grid>\n          </FeatureToggle>\n\n          <FeatureToggle featureName={FeatureToggleNames.ShowCurrency}>\n            <Grid item xs={6} md={3}>\n              <Currency name=\"currency\" label={t('search.currency')} />\n            </Grid>\n          </FeatureToggle>\n\n          <Grid item xs={6} md={3}>\n            <TripType name=\"tripType\" label={t('search.tripType')}></TripType>\n          </Grid>\n        </Grid>\n\n        <Grid container spacing={3}>\n          <Grid item xs={6} md={3}>\n            <Place\n              label={t('search.from')}\n              name=\"from\"\n              country={values.country}\n              currency={values.currency}\n            />\n          </Grid>\n\n          <Grid item xs={6} md={3}>\n            <Place\n              label={t('search.to')}\n              name=\"to\"\n              country={values.country}\n              currency={values.currency}\n            />\n          </Grid>\n          <Grid item xs={6} md={3}>\n            <Field\n              fullWidth={true}\n              component={KeyboardDatePicker}\n              name=\"departDate\"\n              label={t('search.departDate')}\n              minDate={Date.now()}\n              helperText={t(getIn(errors, 'departDate'), {\n                field: t('search.departDate'),\n              })}\n            />\n          </Grid>\n          {values.tripType === TripTypeEnum.RoundTrip && (\n            <Grid item xs={6} md={3}>\n              <Field\n                fullWidth={true}\n                component={KeyboardDatePicker}\n                name=\"returnDate\"\n                label={t('search.returnDate')}\n                minDate={values.departDate}\n                minDateMessage={t('messages.minDate', {\n                  departDate: t('search.departDate'),\n                  returnDate: t('search.returnDate'),\n                })}\n                helperText={t(getIn(errors, 'returnDate'), {\n                  field: t('search.returnDate'),\n                })}\n              />\n            </Grid>\n          )}\n        </Grid>\n\n        <Box mt={3} display=\"flex\" justifyContent=\"center\">\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            fullWidth={isScreenSizeSm}\n            color=\"primary\"\n            size=\"large\"\n            {...bottonProps}\n          >\n            {t('search.search')}\n          </Button>\n        </Box>\n      </Form>\n    </MuiPickersUtilsProvider>\n  );\n};\n\nconst SearchFormik = withFormik({\n  mapPropsToValues: (props: SearchProps): SearchFormInterface => {\n    return props.initSearchForm || defaultSearchForm;\n  },\n  validationSchema: searchFormSchema,\n  handleSubmit: (event: SearchFormInterface, { props, setSubmitting }) => {\n    props.getQuotes(event);\n    setSubmitting(true);\n  },\n})(SearchForm);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchFormik);\n","import { Provider } from 'react-redux';\nimport React, { Suspense } from 'react';\nimport { configureAppStore } from '@white-label-airline/store';\nimport { setI18n } from '@white-label-airline/services/i18n';\nimport { FeatureToggleProvider } from 'react-feature-toggles';\n\nimport Routes from './routes';\nimport { features } from './features.const';\n\nsetI18n('/assets/i18n/{{lng}}.json');\n\nexport const App = () => {\n  return (\n    <FeatureToggleProvider featureToggleList={features}>\n      <Provider store={configureAppStore()}>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Routes />\n        </Suspense>\n      </Provider>\n    </FeatureToggleProvider>\n  );\n};\n\nexport default App;\n","import { FeatureToggleNames } from '@white-label-airline/ui/models/feature-toggle-names.enum';\n\nexport const features = {\n  [FeatureToggleNames.ShowCountry]: true,\n  [FeatureToggleNames.ShowCurrency]: true,\n};\n","import React from 'react';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\n\nimport Search from '../pages/search/search';\n\nexport const Routes: React.FunctionComponent = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <Search />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import { CountryInterface } from '@white-label-airline/services/countries';\n\nexport const country: CountryInterface = { Code: 'CA', Name: 'Canada' };\n","import { SearchFormInterface } from '@white-label-airline/ui/search-form';\nimport { TripTypeEnum } from '@white-label-airline/ui/search-form/models/trip-type.enum';\n\nimport { country } from './country.const';\n\nexport const initSearchForm: SearchFormInterface = {\n  country,\n  tripType: TripTypeEnum.RoundTrip,\n  currency: {\n    Code: 'CAD',\n    DecimalDigits: 2,\n    DecimalSeparator: '.',\n    RoundingCoefficient: 0,\n    SpaceBetweenAmountAndSymbol: false,\n    Symbol: 'C$',\n    SymbolOnLeft: true,\n    ThousandsSeparator: ',',\n  },\n  from: null,\n  departDate: new Date(),\n  to: null,\n  returnDate: null,\n};\n","import React from 'react';\nimport SearchForm from '@white-label-airline/ui/search-form';\n\nimport { initSearchForm } from './search-form-init.const';\n\nconst Search: React.FunctionComponent<{}> = () => {\n  return <SearchForm initSearchForm={initSearchForm} />;\n};\n\nexport default Search;\n"],"sourceRoot":"webpack:///"}